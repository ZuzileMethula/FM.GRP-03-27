// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication11.Data;

#nullable disable

namespace FM.GRP_03_27.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240905144824_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FM.GRP_03_27.Models.Fault.Fault", b =>
                {
                    b.Property<int>("FaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaultId"), 1L, 1);

                    b.Property<string>("FaultDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FaultStatus")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("FaultType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FaultId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("FM.GRP_03_27.Models.FaultTech.Repair", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<DateTime>("RepairDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("RepairDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepairStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("FM.WebSite.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FM.WebSite.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RecordId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("FM.WebSite.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("FM.WebSite.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("userId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApplication11.Models.Customer.C_CreateFault", b =>
                {
                    b.Property<int>("C_FaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("C_FaultId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaultDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.HasKey("C_FaultId");

                    b.HasIndex("FridgeId");

                    b.ToTable("C_CreateFault");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ProfileRequestId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Decision", b =>
                {
                    b.Property<int>("DecisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DecisionId"), 1L, 1);

                    b.Property<string>("DecisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DecisionId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Fridge", b =>
                {
                    b.Property<int>("FridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FridgeId"), 1L, 1);

                    b.Property<string>("FridgeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FridgeId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.FridgeAllocation", b =>
                {
                    b.Property<int>("FridgeAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FridgeAllocationId"), 1L, 1);

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DecisionId")
                        .HasColumnType("int");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MaintananceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FridgeAllocationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DecisionId");

                    b.HasIndex("FridgeId");

                    b.ToTable("FridgeAllocations");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.FridgeScrap", b =>
                {
                    b.Property<int>("ScarpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarpId"), 1L, 1);

                    b.Property<string>("ScarpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarpId");

                    b.ToTable("FridgeScarps");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.ProfileRequest", b =>
                {
                    b.Property<int>("ProfileRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileRequestId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileRequestId");

                    b.ToTable("profileRequests");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.PurchaseRequest", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"), 1L, 1);

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("FridgeId");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("FM.WebSite.Models.Employee", b =>
                {
                    b.HasOne("FM.WebSite.Models.User", "User")
                        .WithOne("Employees")
                        .HasForeignKey("FM.WebSite.Models.Employee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication11.Models.Customer.C_CreateFault", b =>
                {
                    b.HasOne("WebApplication11.Models.CustomerCare.Fridge", "Fridges")
                        .WithMany("C_CreateFaults")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridges");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Customer", b =>
                {
                    b.HasOne("WebApplication11.Models.CustomerCare.ProfileRequest", "ProfileRequests")
                        .WithMany("Customers")
                        .HasForeignKey("ProfileRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileRequests");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.FridgeAllocation", b =>
                {
                    b.HasOne("WebApplication11.Models.CustomerCare.Customer", "Customers")
                        .WithMany("FridgeAllocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication11.Models.CustomerCare.Decision", "Decisions")
                        .WithMany("FridgeAllocations")
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication11.Models.CustomerCare.Fridge", "Fridges")
                        .WithMany("FridgeAllocations")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Decisions");

                    b.Navigation("Fridges");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.PurchaseRequest", b =>
                {
                    b.HasOne("WebApplication11.Models.CustomerCare.Fridge", "Fridges")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridges");
                });

            modelBuilder.Entity("FM.WebSite.Models.User", b =>
                {
                    b.Navigation("Employees")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Customer", b =>
                {
                    b.Navigation("FridgeAllocations");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Decision", b =>
                {
                    b.Navigation("FridgeAllocations");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.Fridge", b =>
                {
                    b.Navigation("C_CreateFaults");

                    b.Navigation("FridgeAllocations");

                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("WebApplication11.Models.CustomerCare.ProfileRequest", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
